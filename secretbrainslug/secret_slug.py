import logging
import random
import json
import copy
from enum import Enum
from datetime import datetime
from player import Player
from game import Game
from util import *

random.seed(datetime.now())

class State(Enum):
    INIT = "INIT"
    PRESIDENT = "PRESIDENT"
    VOTE = "VOTE"
    LEGISLATURE_C = "LEGISLATURE_C"
    LEGISLATURE_P = "LEGISLATURE_P"
    VETO = "VETO"
    IMPLEMENTATION = "IMPLEMENTATION"
    IMPLEMENTATION_ACTION = "IMPLEMENTATION_ACTION"
    NEW_TURN = "NEW_TURN"
    END_GAME = "END_GAME"

class Roles(Enum):
    def toJSON(self):
        return str(self)
    LIBERAL = "‚úå –ß–µ–ª–æ–≤–µ–∫"
    FASCIST = "üêå –ú–æ–∑–≥–æ–≤–æ–π —Å–ª–∏–∑–µ–Ω—å"
    HITLER = "üê∏ –õ–∏–¥–µ—Ä –º–æ–∑–≥–æ–≤—ã—Ö —Å–ª–∏–∑–µ–Ω–µ–π"

class Law(Enum):
    def toJSON(self):
        return str(self)
    LIBERAL = "lib" # üïäÔ∏è
    FASCIST = "fas" # üéñÔ∏è

class Actions(Enum):
    def toJSON(self):
        return str(self)
    INVESTIGATE = "üïµ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
    ELECTION = "üó≥ –≤—ã–±–æ—Ä—ã",
    PEEK = "üëÄ –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å",
    EXECUTION = "üî´ —Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å",

# Globals
DEFAULT_ROLES = [
    Roles.LIBERAL,
    Roles.HITLER,
    Roles.LIBERAL,
    Roles.FASCIST,
    Roles.LIBERAL,
    Roles.LIBERAL,
    Roles.FASCIST,
    Roles.LIBERAL,
    Roles.FASCIST,
    Roles.LIBERAL,
]

VOTE_MARKUP = [[("‚úÖ –ó–∞", 1), ("‚ùå –ü—Ä–æ—Ç–∏–≤", -1)]]

LAWS_LIST = [
    {"type": Law.LIBERAL, "name": "lib law no 1", "description": "üïäÔ∏è –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–µ–Ω—Å–∏–∏"},
    {"type": Law.LIBERAL, "name": "lib law no 2", "description": "üïäÔ∏è –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π: –ü–æ—Å–æ–±–∏–µ –ø–æ –±–µ–∑—Ä–∞–±–æ—Ç–Ω–∏—Ü–µ"},
    {"type": Law.LIBERAL, "name": "lib law no 3", "description": "üïäÔ∏è –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π: –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–µ–π-–ø–∞—Ä–∞–¥–∞"},
    {"type": Law.LIBERAL, "name": "lib law no 4", "description": "üïäÔ∏è –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π: –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–ª"},
    {"type": Law.LIBERAL, "name": "lib law no 5", "description": "üïäÔ∏è –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π: –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ"},
    {"type": Law.LIBERAL, "name": "lib law no 6", "description": "üïäÔ∏è –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ –¥–µ—Ç—è–º"},
    {"type": Law.FASCIST, "name": "fas law no 1", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–∫–æ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å—É–¥–µ–π"},
    {"type": Law.FASCIST, "name": "fas law no 2", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–∫–æ–Ω –æ –°–µ–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ª–∏—Ü–∏–∏"},
    {"type": Law.FASCIST, "name": "fas law no 3", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–ø—Ä–µ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏—Ç–∏–Ω–≥–æ–≤"},
    {"type": Law.FASCIST, "name": "fas law no 4", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–ø—Ä–µ—Ç –°–≤–∏–¥–µ—Ç–µ–ª–µ–π –ò–µ–≥–æ–≤—ã"},
    {"type": Law.FASCIST, "name": "fas law no 5", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –í—ã—Å–ª–∞—Ç—å –∏–ª–∏ –ø–æ—Å–∞–¥–∏—Ç—å —Ü—ã–≥–∞–Ω"},
    {"type": Law.FASCIST, "name": "fas law no 6", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–∏–Ω–æ—Ñ–∏–ª—å–º—ã"},
    {"type": Law.FASCIST, "name": "fas law no 7", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–∫–æ–Ω –æ–± —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–µ"},
    {"type": Law.FASCIST, "name": "fas law no 8", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–ø—Ä–µ—Ç –∫–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –ø–∞—Ä—Ç–∏–∏"},
    {"type": Law.FASCIST, "name": "fas law no 9", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –°–º–µ—Ä—Ç–Ω–∞—è –∫–∞–∑–Ω—å –¥–ª—è –ø–µ–¥–æ—Ñ–∏–ª–æ–≤ –∏ –≤—Ä–∞–≥–æ–≤ –Ω–∞—Ä–æ–¥–∞"},
    {"type": Law.FASCIST, "name": "fas law no 10", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤–≤–æ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è"},
    {"type": Law.FASCIST, "name": "fas law no 11", "description": "üéñÔ∏è –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—é–∑–∞ –º–æ–ª–æ–¥–µ–∂–∏"},
]


class SecretSlugsGame(Game):
    laws_deck = []
    laws_discard = []
    laws_in_action = []
    extra_turn_president = 0

    OPTION_SHUFFLE = True

    # Abstract methods redef
    def get_init_message(self, p):
        if p["role"] == Roles.LIBERAL:
            return "–í—ã ‚úå –ß–µ–ª–æ–≤–µ–∫"
        if p["role"] == Roles.FASCIST:
            return "–í—ã üêå –ú–æ–∑–≥–æ–≤–æ–π —Å–ª–∏–∑–µ–Ω—å! " + self.get_fashists_list(exclude_p=p)
        if p["role"] == Roles.HITLER:
            return "–í—ã üê∏ –õ–∏–¥–µ—Ä –º–æ–∑–≥–æ–≤—ã—Ö —Å–ª–∏–∑–µ–Ω–µ–π! " + self.get_fashists_list(hitler=False)

    def do_next_step(self, unstack=False) -> Result:
        if self.check_next_step():
            s_state = self.state
            r = self._do_next_step()
            e_state = self.state
            if e_state is None:
                e_state = "None"
            else:
                e_state = e_state.value
            self.current_turn_state()["logs"].append((f"next_action state {s_state.value}->{e_state}", r))
            return r
        return Result()

    def _do_next_step(self) -> Result:
        if self.state == State.INIT:
            return None
        elif self.state == State.PRESIDENT:
            return None
        elif self.state == State.VOTE:
            return self.implement_votes()
        elif self.state == State.LEGISLATURE_C:
            return None
        elif self.state == State.LEGISLATURE_P:
            return None
        elif self.state == State.VETO:
            return None
        elif self.state == State.IMPLEMENTATION:
            return self.implement_action()
        elif self.state == State.IMPLEMENTATION_ACTION:
            return None
        elif self.state == State.NEW_TURN:
            return self.new_turn()
        elif self.state == State.END_GAME:
            return None
        if self.state is None:
            return None
        raise Exception(f"not yet implemented - {self.state}")

    def check_next_step(self) -> bool:
        if self.state == State.INIT:
            return False
        elif self.state == State.PRESIDENT:
            return False
        elif self.state == State.VOTE:
            for key, player in self.n.items():
                if key not in self.current_turn_state()["votes"] or self.current_turn_state()["votes"][key] is None:
                    return False
            return True
        elif self.state == State.LEGISLATURE_C:
            return False
        elif self.state == State.LEGISLATURE_P:
            return False
        elif self.state == State.VETO:
            return False
        elif self.state == State.IMPLEMENTATION:
            return True
        elif self.state == State.IMPLEMENTATION_ACTION:
            return False
        elif self.state == State.NEW_TURN:
            return self.new_turn()
        elif self.state == State.END_GAME:
            return False
        if self.state is None:
            return False
        raise Exception(f"not yet implemented - {self.state}")

    def _do_action(self, user, action) -> Result:
        if self.state == State.INIT:
            return None
        elif self.state == State.PRESIDENT:
            return self.pick_chancellor(user, action)
        elif self.state == State.VOTE:
            return self.vote(user, action)
        elif self.state == State.LEGISLATURE_C:
            return self.legislation_c(user, action)
        elif self.state == State.LEGISLATURE_P:
            return self.legislation_p(user, action)
        elif self.state == State.VETO:
            return self.veto(user, action)
        elif self.state == State.IMPLEMENTATION:
            return None
        elif self.state == State.IMPLEMENTATION_ACTION:
            return self.action(user, action)
        elif self.state == State.NEW_TURN:
            return None
        elif self.state == State.END_GAME:
            return None
        if self.state is None:
            return None
        raise Exception(f"not yet implemented - {self.state}")

    def get_chancellor_candidates_list(self):
        exclude_id = [self.get_current_president().id]
        if self.current_turn > 1:
            exclude_id.append(self.n[self.prev_turn_state()["president"]].id)
            c = self.prev_turn_state()["chancellor"]
            if c > 0:
                exclude_id.append(self.n[self.prev_turn_state()["chancellor"]].id)
        return self.get_buttons_list(exclude_id=exclude_id, exclude_dead=True)

    def get_fashists_list(self, hitler=True, exclude_p=None):
        init_msg = "–û—Å—Ç–∞–ª—å–Ω—ã–µ –ú–æ–∑–≥–æ–≤—ã–µ —Å–ª–∏–∑–µ–Ω–∏: "
        msg = init_msg
        hitler_msg = ""
        for p in self.pl:
            if hitler and p["role"] == Roles.HITLER:
                hitler_msg = f"üê∏ {p['name']} –õ–∏–¥–µ—Ä –º–æ–∑–≥–æ–≤—ã—Ö —Å–ª–∏–∑–µ–Ω–µ–π. "
            if p["role"] == Roles.FASCIST:# and (exclude_p is None or exclude_p["id"] != p["id"]):
                if msg != init_msg:
                    msg += ", "
                msg += f"üêå {p['name']}"
        return hitler_msg + msg

    def shuffle_roles(self):
        roles = DEFAULT_ROLES[:len(self.pl)]
        while len(roles) < len(self.pl):
            roles.append(Roles.FASCIST)
            if len(roles) < len(self.pl):
                roles.append(Roles.LIBERAL)
        if self.OPTION_SHUFFLE:
            random.shuffle(roles)
        logging.info("Roles are " + str(roles))
        return roles

    def shuffle_laws(self):
        laws = copy.deepcopy(LAWS_LIST)
        if self.OPTION_SHUFFLE:
            random.shuffle(laws)
        logging.info("Laws are " + str(laws))
        return laws

    # GAME PART
    def init_game(self, roles=None, laws=None, starting_player=None):
        super().init_game()
        self.state = State.INIT
        # –ø–µ—Ä–µ–º–µ—à–∞–µ–º —Ä–æ–ª–∏
        if roles is None:
            roles = self.shuffle_roles()
        # —Ä–∞–∑–¥–∞–µ–º —Ä–æ–ª–∏
        i = 0
        for p in self.pl:
            p: Player
            p.role = roles[i]
            i += 1
        #–∑–∞–≤–æ–¥–∏–º –∑–∞–∫–æ–Ω—ã
        if laws is None:
            laws = self.shuffle_laws()
        self.laws_deck = laws
        self.laws_in_action = []
        self.laws_discard = []

        #–ó–∞–≤–æ–¥–∏–º –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥
        self.status = None
        self.extra_turn_president = 0

        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        self.start_ts = datetime.now()
        logging.info("Starting timestamp " + str(self.start_ts))
        return self.new_turn(starting_player)

    def view_laws(self, n):
        self.shuffle_in_discarded()
        return self.laws_deck[:n]

    def pop_laws(self, n):
        poped = self.laws_deck[:n]
        self.laws_deck = self.laws_deck[n:]
        self.shuffle_in_discarded()
        return poped

    def shuffle_in_discarded(self):
        if len(self.laws_deck) < 4:
            self.laws_deck += self.laws_discard
            self.laws_discard = []
            if self.OPTION_SHUFFLE:
                random.shuffle(self.laws_deck)

    def count_laws(self):
        lib = 0
        fas = 0
        for l in self.laws_in_action:
            if l["type"] == Law.LIBERAL:
                lib += 1
            if l["type"] == Law.FASCIST:
                fas += 1
        return lib, fas

    def check_victory(self):
        lib, fas = self.count_laws()
        lib_alive, fas_alive = 0, 0
        for p in self.pl:
            if p.role == Roles.HITLER:
                if p.dead:
                    self.status = False, True, "–ì–∏—Ç–ª–µ—Ä —É–±–∏—Ç! –õ–∏–±–µ—Ä–∞–ª—ã –ø–æ–±–µ–¥–∏–ª–∏!"
                    return True
                else:
                    fas_alive += 1
            if p.role == Roles.FASCIST:
                if not p.dead:
                    fas_alive += 1
            if p.role == Roles.LIBERAL:
                if not p.dead:
                    lib_alive += 1
        if fas == 3:
            if self.current_turn_state()["chancellor"] > 0 and self.n[self.current_turn_state()["chancellor"]].role == Roles.HITLER:
                if self.current_turn_state()["law"] is None or self.current_turn_state()["law"]["type"] == Law.LIBERAL:
                    self.status = False, False, "–§–∞—à–∏—Å—Ç—ã –∏–∑–±—Ä–∞–ª–∏ –ì–∏—Ç–ª–µ—Ä–∞ –∫–∞–Ω—Ü–ª–µ—Ä–æ–º! –§–∞—à–∏—Å—Ç—ã –ø–æ–±–µ–¥–∏–ª–∏!"
                    return True
        if fas >= 4:
            if self.current_turn_state()["chancellor"] > 0 and self.n[self.current_turn_state()["chancellor"]].role == Roles.HITLER:
                self.status = False, False, "–§–∞—à–∏—Å—Ç—ã –∏–∑–±—Ä–∞–ª–∏ –ì–∏—Ç–ª–µ—Ä–∞ –∫–∞–Ω—Ü–ª–µ—Ä–æ–º! –§–∞—à–∏—Å—Ç—ã –ø–æ–±–µ–¥–∏–ª–∏!"
                return True
        if fas >= 6:
            self.status = False, False, "–§–∞—à–∏—Å—Ç—ã –∏–∑–±—Ä–∞–ª–∏ 6 –∑–∞–∫–æ–Ω–æ–≤! –§–∞—à–∏—Å—Ç—ã –ø–æ–±–µ–¥–∏–ª–∏!"
            return True
        if lib >= 6:
            self.status = False, True, "–õ–∏–±–µ—Ä–∞–ª—ã –∏–∑–±—Ä–∞–ª–∏ 6 –∑–∞–∫–æ–Ω–æ–≤! –õ–∏–±–µ—Ä–∞–ª—ã –ø–æ–±–µ–¥–∏–ª–∏!"
            return True
        self.status = True, None, f"–ü—Ä–∏–Ω—è—Ç–æ {lib} –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤ –∏ {fas} —Ñ–∞—à–∏—Å—Ç—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–≤"
        if fas_alive > lib_alive:
            self.status = False, False, "–§–∞—à–∏—Å—Ç—ã —É–±–∏–ª–∏ –ª–∏–±–µ—Ä–∞–ª–æ–≤ –∏ —Ç–µ–ø–µ—Ä—å –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ"
            return True
        return False

    def get_victory_message(self) -> Result:
        end, whom, msg = self.state
        return Result.notify_all(f"{msg}\n\n{self.get_fashists_list()}")

    def pick_next_president(self, president=None):
        if self.current_turn == 0:
            if president is None:
                return random.randint(1, len(self.pl))
            return president
        president = self.current_turn_state()["president"]
        if self.extra_turn_president > 0:
            president, self.extra_turn_president = self.extra_turn_president, -president
            if not self.n[president]["dead"]:
                return president
        if self.extra_turn_president < 0:
            president, self.extra_turn_president = -self.extra_turn_president, 0
        for i in range(len(self.pl)):
            president += 1
            if president > len(self.n):
                president = 1
            if not self.n[president].dead:
                return president
        raise Exception("Everybody is dead?")

    def new_turn(self, president=None):
        president_n = self.pick_next_president(president)
        president = self.n[president_n]
        if self.current_turn > 1:
            victory = self.check_victory()
            if victory:
                return False
        self.current_turn += 1
        turn_obj = {
            "president": president_n,
            "chancellor": -1,
            "chancellor_candidate": -1,
            "votes": {},
            "laws_big_list": [],
            "laws_short_list": [],
            "law": None,
            "veto": False,
            "veto_p": None,
            "veto_c": None,
            "action": -1,
            "logs": [],
        }
        if self.current_turn == 1:
            turn_obj["chaos_score"] = 0
        else:
            turn_obj["chaos_score"] = self.prev_turn_state()["chaos_score"]
        for key, p in self.n.items():
            if p.dead:
                turn_obj["votes"][key] = 0
            else:
                turn_obj["votes"][key] = None
        self.game_state[self.current_turn] = turn_obj
        candidates_list = self.get_chancellor_candidates_list()
        if len(candidates_list) == 0:
            self.state = State.IMPLEMENTATION
            return Result.notify_all("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—ã –Ω–∞ —Ä–æ–ª—å –∫–∞–Ω—Ü–ª–µ—Ä–∞!", State.IMPLEMENTATION)
        r = Result.notify_all(f"{president.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –≤ —ç—Ç–æ–º —Ö–æ–¥—É!\n{president.name} –í—ã–±–∏—Ä–∞–µ—Ç —Å–µ–±–µ –∫–∞–Ω—Ü–ª–µ—Ä–∞", State.PRESIDENT)
        r.msg_to_id(president.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±–µ –∫–∞–Ω—Ü–ª–µ—Ä–∞:", State.PRESIDENT, candidates_list)
        self.state = State.PRESIDENT
        return r

    def pick_chancellor(self, user, action):
        r = Game.check_input_values(action, 1, self.len)
        if r is not None:
            return r
        president = self.get_current_president()
        if user['id'] != president.id:
            return Result.error(f'{str(user)} –Ω–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç!')
        candidate = self.n[action]
        if president.num == candidate.num:
            return Result.error(f"–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è")
        if self.current_turn > 1:
            if action == self.prev_turn_state()['president']:
                return Result.error(f"–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å {candidate.name} - –æ–Ω –±—ã–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –≤ –ø—Ä–æ—à–ª–æ–º —Ö–æ–¥—É")
            if action == self.prev_turn_state()['chancellor']:
                return Result.error(f"–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å {candidate.name} - –æ–Ω –±—ã–ª –∫–∞–Ω—Ü–ª–µ—Ä–æ–º –≤ –ø—Ä–æ—à–ª–æ–º —Ö–æ–¥—É")
            if candidate.dead:
                return Result.error(f"–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å {candidate.name} - –æ–Ω –º–µ—Ä—Ç–≤")
        self.current_turn_state()["chancellor_candidate"] = action
        warnings = ""
        if self.check_hitler_chancellorship_wins_the_game():
            warnings += "* –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –æ–∫–∞–∂–µ—Ç—Å—è *üê∏ –õ–∏–¥–µ—Ä–æ–º –ú–æ–∑–≥–æ–≤—ã—Ö –°–ª–∏–∑–Ω–µ–π*, —Ç–æ –ª–∏–±–µ—Ä–∞–ª—ã –ø—Ä–æ–∏–≥—Ä–∞—é—Ç –∏–≥—Ä—É\n"
        if self.check_next_fas_law_wins_the_game():
            warnings += "* –ï—Å–ª–∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –≤–º–µ—Å—Ç–µ —Å –∫–∞–Ω—Å–ª–µ—Ä–æ–º –ø—Ä–∏–º—É—Ç –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã–π –∑–∞–∫–æ–Ω, —Ç–æ –ª–∏–±–µ—Ä–∞–ª—ã –ø—Ä–æ–∏–≥—Ä–∞—é—Ç –∏–≥—Ä—É\n"
        if self.check_chaos_score():
            warnings += f"* –ï—Å–ª–∏ –ø–∞—Ä–ª–∞–º–µ–Ω—Ç –æ—Ç–∫–∞–∂–µ—Ç {candidate.name}, —Ç–æ {president.name} –ø—Ä–∏–º–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        next_action = self.desribe_next_action()
        if next_action is not None:
            warnings += next_action + "\n"
        msg = f"–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç {president.name} –≤—ã–±—Ä–∞–ª {candidate.name} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –≤ –∫–∞–Ω—Ü–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ö–æ–¥—É\n{warnings}–£—Ç–≤–µ—Ä–¥–∏—Ç—å?"
        r = Result.notify_all(msg, State.VOTE, VOTE_MARKUP)
        self.state = State.VOTE
        return r

    def check_president_legislation_is_ready(self):
        if len(self.current_turn_state()["laws_short_list"]) > 0:
            return True
        return False

    def legislation_c(self, user, action):
        r = Game.check_input_values(action, 0, 2)
        if r is not None:
            return r
        chancellor = self.get_current_chancellor()
        president = self.get_current_president()
        if user['id'] != chancellor.id:
            return Result.error(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫–∞–Ω—Å–ª–µ—Ä –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ")
        self.current_turn_state()["laws_short_list"] = copy.deepcopy(self.current_turn_state()["laws_big_list"])
        self.laws_discard.append(self.current_turn_state()["laws_short_list"][action])
        del self.current_turn_state()["laws_short_list"][action]
        laws_descr = self.current_turn_state()["laws_short_list"][0]["description"] + " –∏ " + self.current_turn_state()["laws_short_list"][1]["description"]
        r = Result.action("–í—ã–±—Ä–∞–Ω—ã –∑–∞–∫–æ–Ω—ã " + laws_descr)
        laws = copy.deepcopy(self.current_turn_state()["laws_short_list"])
        decoration = self.decorate_laws_list(laws, self.check_veto_option())
        self.state = State.LEGISLATURE_P
        r.msg_to_id(president.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–æ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:", State.LEGISLATURE_P, decoration)
        return r

    def legislation_p(self, user, action):
        r = Game.check_input_values(action, -1, 2)
        if r is not None:
            return r
        chancellor = self.get_current_chancellor()
        president = self.get_current_president()
        if user['id'] != president.id:
            return Result.error(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ")
        if action < 0:
            if not self.check_veto_option():
                return False, f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{action}'"
            if not self.current_turn_state()["veto_p"] is None:
                return False, f"–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∞—Ç—å –≤–µ—Ç–æ –¥–≤–∞–∂–¥—ã '{action}'"
            self.current_turn_state()["veto"] = True
            self.current_turn_state()["veto_p"] = True
            r = Result.action(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –í–µ—Ç–æ –Ω–∞ –∑–∞–∫–æ–Ω—ã '{action}'", State.VETO)
            r.msg_to_id(chancellor.id, f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –í–µ—Ç–æ –Ω–∞ –∑–∞–∫–æ–Ω—ã '{action}'", State.VETO, VOTE_MARKUP)
            self.state = State.VETO
            return r
        self.current_turn_state()["law"] = self.current_turn_state()["laws_short_list"][action]
        self.laws_in_action.append(self.current_turn_state()["law"])
        if action == 1:
            discarded = 0
        else:
            discarded = 1
        self.laws_discard.append(self.current_turn_state()["laws_short_list"][discarded])
        self.state = State.IMPLEMENTATION
        return Result.notify_all("–í—ã–±—Ä–∞–Ω –∑–∞–∫–æ–Ω " + self.current_turn_state()["law"]["description"], State.IMPLEMENTATION)

    def veto(self, user, action):
        r = Game.check_input_values(action, -1, 1)
        if r is not None:
            return r
        chancellor = self.get_current_chancellor()
        president = self.get_current_president()
        if user['id'] == chancellor.id:
            return Result.error(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∫–∞–Ω—Å–ª–µ—Ä –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ")
        self.current_turn_state()["veto_c"] = action
        r = Result()
        if action == 1:
            r = Result.action(f"–ü—Ä–∏–Ω—è—Ç –≥–æ–ª–æ—Å –∑–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ç–æ")
            r.notify_all_others(f"–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –∏ –∫–∞–Ω—Å–ª–µ—Ä –Ω–∞–ª–æ–∂–∏–ª–∏ –≤–µ—Ç–æ –Ω–∞ –≤—Å–µ –∑–∞–∫–æ–Ω—ã")
            self.current_turn_state()["chaos_score"] += 1
            self.state = State.IMPLEMENTATION
        else:
            r = Result.action(f"–ü—Ä–∏–Ω—è—Ç –≥–æ–ª–æ—Å –ø—Ä–∏—Ç–∏–≤ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤–µ—Ç–æ")
            r.notify_all_others(f"–ö–∞–Ω—Å–ª–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ç–æ –Ω–∞ –≤—Å–µ –∑–∞–∫–æ–Ω—ã")
            laws = copy.deepcopy(self.current_turn_state()["laws_short_list"])
            decoration = self.decorate_laws_list(laws)
            r.msg_to_id(president.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–æ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:", State.LEGISLATURE_P, decoration)
            self.state = State.LEGISLATURE_P
        return r

    def vote(self, user, vote) -> Result:
        r = Game.check_input_values(vote, -1, 1)
        if r is not None:
            return r
        player = self.get_player_by_id(user['id'])
        if player is None:
            return Result.error("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
        candidate = self.n[self.current_turn_state()["chancellor_candidate"]]
        self.current_turn_state()["votes"][player.num] = vote
        if vote > 0:
            voted_name = "–ü—Ä–∏–Ω—è—Ç –≥–æ–ª–æ—Å –∑–∞ –∫–∞–Ω—Ü–ª–µ—Ä–∞ " + candidate.name
        else:
            voted_name = "–ü—Ä–∏–Ω—è—Ç –≥–æ–ª–æ—Å –ø—Ä–æ—Ç–∏–≤ –∫–∞–Ω—Ü–ª–µ—Ä–∞ " + candidate.name
        return Result.action(voted_name)

    def implement_votes(self):
        result = 0
        for key, p in self.n.items():
            vote = self.current_turn_state()["votes"][key]
            result += vote
        if result > 0:
            self.current_turn_state()["chancellor"] = self.current_turn_state()["chancellor_candidate"]
            chancellor = self.get_current_chancellor()
            if self.check_victory():
                self.state = State.END_GAME
                return Result.notify_all(f"{self.n[self.current_turn_state()['chancellor']].name} –æ–∫–∞–∑–∞–ª—Å—è –ì–∏—Ç–ª–µ—Ä–æ–º!")
            self.current_turn_state()["laws_big_list"] += self.pop_laws(3)
            decoration = self.decorate_laws_list(self.current_turn_state()["laws_big_list"])
            msg = "–í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –ö–∞–Ω—Ü–ª–µ—Ä–æ–º!\n–°–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω–æ–≤ –Ω–∞ —É–≤–µ—Ä–∂–µ–¥–Ω–∏–µ (–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö):"
            r = Result.notify_all(f"{chancellor.name} –∏–∑–±—Ä–∞–Ω –∫–∞–Ω—Ü–ª–µ—Ä–æ–º")
            r.msg_to_id(chancellor.id, msg, State.LEGISLATURE_C, decoration)
            self.state = State.LEGISLATURE_C
            return r
        self.current_turn_state()["chaos_score"] += 1
        self.state = State.IMPLEMENTATION
        r = Result.notify_all(f"{self.n[self.current_turn_state()['chancellor_candidate']].name} –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç")
        r.trigger_action()
        return r

    def chaos_popup_law(self):
        popped = self.pop_laws(1)
        self.current_turn_state()["chaos_score"] = 0
        self.current_turn_state()["law"] = popped[0]
        self.laws_in_action.append(self.current_turn_state()["law"])
        return self.current_turn_state()["law"]

    def check_veto_option(self):
        lib, fas = self.count_laws()
        n = fas
        if self.current_turn_state()["veto"] or not self.current_turn_state()["veto_p"] is None:
            return False
        if fas == 5:
            return True
        return False

    def check_hitler_chancellorship_wins_the_game(self):
        lib, fas = self.count_laws()
        return fas >= 3

    def check_next_fas_law_wins_the_game(self):
        lib, fas = self.count_laws()
        return fas >= 5

    def check_chaos_score(self):
        return self.current_turn_state()['chaos_score'] >= 2

    def check_next_action(self):
        lib, fas = self.count_laws()
        return self.select_action(fas+1)

    def select_action(self, n=None):
        if n is None:
            lib, fas = self.count_laws()
            n = fas
        if len(self.pl) <= 6:
            if n == 3:
                return Actions.PEEK
            if n >= 4:
                return Actions.EXECUTION
        else:
            if len(self.pl) <= 8:
                if n == 2:
                    return Actions.INVESTIGATE
                if n == 3:
                    return Actions.ELECTION
                if n >= 4:
                    return Actions.EXECUTION
            else:
                if n <= 2:
                    return Actions.INVESTIGATE
                if n == 3:
                    return Actions.ELECTION
                if n >= 4:
                    return Actions.EXECUTION
        return None

    def desribe_next_action(self):
        action = self.check_next_action()
        if action == Actions.PEEK:
            return "–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ —É –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 3 –∑–∞–∫–æ–Ω–∞"
        if action == Actions.EXECUTION:
            return "–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ —É –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–ª–∞—Å—Ç—å –∫–∞–∑–Ω–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"
        if action == Actions.INVESTIGATE:
            return "–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ —É –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"
        if action == Actions.ELECTION:
            return "–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ —É –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
        return None

    def action(self, user, action) -> Result:
        r = Game.check_input_values(action, 1, self.len)
        if r is not None:
            return r
        president = self.get_current_president()
        if user['id'] != president.id:
            return Result.error("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
        target = self.n[action]
        lib, fas = self.count_laws()
        action_type = self.select_action(fas)
        if action_type == Actions.INVESTIGATE:
            self.current_turn_state()["action"] = action
            role = target.role
            if role == Roles.LIBERAL:
                msg = f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ {target.name} - –ª–∏–±–µ—Ä–∞–ª'
            else:
                msg = f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ {target.name} - —Ñ–∞—à–∏—Å—Ç'
            self.state = State.NEW_TURN
            return Result.action(msg, State.NEW_TURN)
        if action_type == Actions.ELECTION:
            if president.id == target.id:
                return Result.error(f'–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º')
            self.current_turn_state()["action"] = action
            self.extra_turn_president = action
            self.state = State.NEW_TURN
            return Result.notify_all(f"–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç {president.name} –Ω–∞–∑–Ω–∞—á–∏–ª —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞. –í —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É {target.name} –±—É–¥–µ—Ç –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏", State.NEW_TURN)
        if action_type == Actions.EXECUTION:
            self.current_turn_state()["action"] = action
            target.dead = True
            self.check_victory()
            if target.role == Roles.HITLER:
                self.state = State.END_GAME
                return Result.notify_all(f'{target.name} –ø—Ä–∏–≥–æ–≤–æ—Ä–µ–Ω –∫ —Ä–∞—Å—Å—Ç—Ä–µ–ª—É. {target.name} –æ–∫–∞–∑–∞–ª—Å—è –ì–∏—Ç–ª–µ—Ä–æ–º! –õ–∏–±–µ—Ä–∞–ª—ã –ø–æ–±–µ–¥–∏–ª–∏', State.END_GAME)
            self.state = State.NEW_TURN
            return Result.notify_all(f'–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç {president.name} –ø—Ä–∏–≥–æ–≤–æ—Ä–∏–ª {target.name} –ø—Ä–∏–≥–æ–≤–æ—Ä–µ–Ω –∫ —Ä–∞—Å—Å—Ç—Ä–µ–ª—É', State.NEW_TURN)
        return Result.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ {action_type}")

    def implement_action(self) -> Result:
        lib, fas = self.count_laws()
        msg_all = ""
        if self.current_turn_state()["law"] is None:
            if self.check_chaos_score():
                law = self.chaos_popup_law()
                msg_all += f"–ù–∞—Ä–æ–¥ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º –ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞! –ù–∞—Ä–æ–¥ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–æ–Ω–∞ {law['description']}"
                if self.current_turn_state()["law"]["type"] == Law.LIBERAL:
                    self.state = State.NEW_TURN
                    r = Result.notify_all(msg_all, State.NEW_TURN)
                    r.trigger_action()
                    return r
            else:
                self.current_turn_state()["action"] = 0
                self.state = State.NEW_TURN
                r = Result.notify_all(f"–í —ç—Ç–æ–º —Ö–æ–¥—É –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞. –ù–∞—Ä–æ–¥ –Ω–µ–¥–æ–≤–ª–µ–Ω –Ω–∞ {self.current_turn_state()['chaos_score']}/3", State.NEW_TURN)
                r.trigger_action()
                return r
        elif self.current_turn_state()["law"]["type"] == Law.LIBERAL:
            self.current_turn_state()["action"] = 0
            self.state = State.NEW_TURN
            r = Result.notify_all(f"–í —ç—Ç–æ–º —Ö–æ–¥—É –±—ã–ª –ø—Ä–∏–Ω—è—Ç –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω {self.current_turn_state()['law']['description']}", State.NEW_TURN)
            r.trigger_action()
            return r
        else:
            msg_all += f'–ü—Ä–∏–Ω—è—Ç –∑–∞–∫–æ–Ω: {self.current_turn_state()["law"]["description"]}'
        action = self.select_action(fas)
        president = self.get_current_president()
        if action is Actions.PEEK:
            self.current_turn_state()["action"] = 0
            r = Result.notify_all(f'{msg_all}\n–≠—Ç–æ—Ç –∑–∞–∫–æ–Ω –¥–∞–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 3 –∑–∞–∫–æ–Ω–∞', State.NEW_TURN)
            peeked_result = self.view_laws(3)
            peeked_str = '\n'.join([l["description"] for l in peeked_result])
            r.msg_to_id(president.id, f"–°–ª–µ–¥—É—é—â–∏–µ 3 –∑–∞–∫–æ–Ω–∞ –≤ –∫–æ–ª–æ–¥–µ:\n{peeked_str}", State.NEW_TURN)
            r.trigger_action()
            self.state = State.NEW_TURN
            return r
        if action == Actions.INVESTIGATE:
            buttons = self.get_buttons_list(exclude_id=president.id)
            r = Result.notify_all(f'{msg_all}\n–≠—Ç–æ—Ç –∑–∞–∫–æ–Ω –¥–∞–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞', State.IMPLEMENTATION_ACTION)
            r.msg_to_id(president.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", State.IMPLEMENTATION_ACTION, buttons)
            self.state = State.IMPLEMENTATION_ACTION
            return r
        if action == Actions.ELECTION:
            buttons = self.get_buttons_list(exclude_id=president.id, exclude_dead=True)
            r = Result.notify_all(f'{msg_all}\n–≠—Ç–æ—Ç –∑–∞–∫–æ–Ω –¥–∞–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞', State.IMPLEMENTATION_ACTION)
            r.msg_to_id(president.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", State.IMPLEMENTATION_ACTION, buttons)
            self.state = State.IMPLEMENTATION_ACTION
            return r
        if action == Actions.EXECUTION:
            buttons = self.get_buttons_list(exclude_id=president.id, exclude_dead=True)
            r = Result.notify_all(f'{msg_all}\n–≠—Ç–æ—Ç –∑–∞–∫–æ–Ω –¥–∞–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç—Ä–µ–ª—è—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞', State.IMPLEMENTATION_ACTION)
            r.msg_to_id(president.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ä–∞—Å—Ç—Ä–µ–ª", State.IMPLEMENTATION_ACTION, buttons)
            self.state = State.IMPLEMENTATION_ACTION
            return r
        # action is None
        self.current_turn_state()["action"] = 0
        self.state = State.NEW_TURN
        r = Result.notify_all(f'{msg_all}\n–≠—Ç–æ—Ç –∑–∞–∫–æ–Ω –Ω–µ –¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É', State.NEW_TURN)
        r.trigger_action()
        return r

    def implement_legislature(self):
        pass

    def get_current_president(self) -> Player:
        return self.n[self.current_turn_state()['president']]

    def get_current_chancellor(self) -> Player:
        return self.n[self.current_turn_state()['chancellor']]

    def decorate_laws_list(self, laws, veto=False):
        list = []
        i = 0
        for l in laws:
            item = [(str(l["description"]), i)]
            i += 1
            list.append(item)
        if veto:
            item = [("–ü—Ä–µ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ª–æ–∂–∏—Ç—å –≤–µ—Ç–æ", -1)]
            list.append(item)
        return list
